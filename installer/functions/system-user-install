# Initiate system user install

install_as_system_user() {
  [[ $(id -u $LT_USER) ]] || fatal "The user \"$LT_USER\" does not exist."

  if [[ $(id -u) -ne 0 ]]; then
    info "Switching to user \"$LT_USER\"."
  fi

  export -f system_user_install
  su $LT_USER --shell /bin/bash -c "system_user_install"
}


# Functions to be used as the system user

system_user_install() {
  for file in ./functions/*; do
    source $file
  done

  safety on
  install_rvm
  safety off
    load_rvm
  safety on
  install_ruby
  clone_repos

  skip_decision "Do you want to create a new db?"             && setup_db
  skip_decision "Do you want to install the ruby backend?"    && setup_backend
  skip_decision "Do you want to install the ramaze frontend?" && setup_frontend
}

clone_repos() {
  info "Cloning repositories..."

  URL="git://github.com/Libertree"

  mkdir -p ~/git
  safety off
    cd ~/git
  safety on
  for repo in libertree-db \
              libertree-backend-rb \
              libertree-frontend-ramaze; do
    if [[ ! -d $repo ]]; then
      git clone "$URL/$repo.git"
    else
      safety off
        cd "$repo"
      safety on
      git pull origin
      safety off
        cd -
      safety on
    fi
  done
}


setup_db() {
  # abort if db server is not running
  if ! pgrep postgres >/dev/null; then
    fatal "The PostgreSQL server is not running. Please start it manually."
  fi

  safety off
    cd ~/git/libertree-db
  safety on

  export PGHOST=localhost
  info "Creating db owner and database as user \"postgres\"."

  # TODO: better move these checks to the create{user,db}.sh scripts
  if echo "\dg" | psql -U postgres | grep -q libertree; then
    warn "libertree database owner already exists. Skipping."
  else
    ./createuser.sh
  fi

  if psql -U postgres -l | grep -q libertree; then
    warn "libertree databases already exist. Skipping."
  else
    ./createdb.sh
  fi

  handle_config "database.yaml"

  info "Applying database migrations"
  LIBERTREE_ENV=production ./migrate.sh
}

setup_backend() {
  safety off
    cd ~/git/libertree-backend-rb
    rvm use --create 1.9.3@libertree-backend-rb
  safety on

  gem list --local | grep -qE '^bundler' || (info "Installing bundler"; gem install bundler)

  info "Installing dependent gems"
  bundle install --without development

  [[ ! -e public.key ]] && [[ ! -e private.key ]] && bundle exec ruby generate-key-pair.rb
  handle_config "config.yaml"

  # TODO: offer to use the same db config as for libertree-db
  handle_config "database.yaml"

  info "Running test suite now"
  bundle exec bin/test.sh
}

setup_frontend() {
  # TODO: untested
  safety off
    cd ~/git/libertree-frontend-ramaze
    rvm use --create 1.9.3@libertree-frontend-ramaze
  safety on

  gem list --local | grep -qE '^bundler' || (info "Installing bundler"; gem install bundler)

  info "Installing dependent gems"
  bundle install --without development
  ./css-build.sh

  safety off
    cd config
  safety on

  # TODO: offer to use the same db config as for libertree-db
  handle_config "database.yaml"
  handle_config "application.yaml"
  mkdir -p public/images/avatars
}

install_rvm() {
  # skip if rvm exists or user doesn't want to install it.
  # TODO: ~/.rvm exists even if the RVM install was aborted. Try harder.
  [[ -d ~/.rvm ]] && return 0

  warn "RVM is not installed."
  yes_or_fatal "Do you want to install RVM now?" "RVM is required. Please install it manually."

  info "fetching RVM installation script from http://get.rvm.io"
  curl -L get.rvm.io | bash -s stable || fatal "Installation of RVM failed. Please install it manually."
}

install_ruby() {
  # skip if ruby v1.9.3 is installed
  if rvm list | grep -q "ruby-1.9.3"; then
    return 0
  fi

  clear
  info "Installing ruby 1.9.3"
  info "You will see a number of requirements that your system must meet in order to install ruby."
  info "Press any key to show the requirements."
  read -n1

  safety off
    rvm requirements
    info "Press any key to continue installing ruby 1.9.3."
    read -n1
    rvm install 1.9.3
  safety on
}
