# functions to
# - determine the target system
# - check dependencies and installed version
# - automatically install software packages

determine_system() {
  local system="$(uname|tr a-z A-Z)"
  if [[ "$system" == "LINUX" ]] || [[ "$system" =~ *BSD* ]]; then
    if   test -f /etc/fedora-release; then
      DIST="fedora"
      INSTALL="yum install"
    elif test -f /etc/redhat-release; then
      DIST="redhat"
      INSTALL="yum install"
    elif test -f /etc/arch-release; then
      DIST="arch"
      INSTALL="pacman -S"
    elif test -f /etc/gentoo-release; then
      DIST="gentoo"
      INSTALL="emerge -1atv"
    elif test -f /etc/lsb-release; then
      DIST="ubuntu"
      INSTALL="apt-get install"
    elif test -f /etc/debian-release; then
      DIST="debian"
      INSTALL="apt-get install"
    else
      DIST="unknown"
      INSTALL="UNKNOWN"
      warn "Auto-install is not supported on your system. Please talk to us so that we can add support for your system."
    fi

  elif [[ "$system" == "DARWIN" ]]; then
    DIST="mac"
    if [[ $(command -v brew) ]]; then
      INSTALL="brew install"
    else
      warn "Auto-install on Mac is only supported through the homebrew package manager."
      INSTALL="UNKNOWN"
    fi
  else
    INSTALL="UNKNOWN"
  fi
}

check_dependencies() {
  info "Checking dependencies..."

  # PostgreSQL 9.0.0 <= v < 10.x.x
  if ! command -v postgres >/dev/null 2>&1; then
    # check if binary is in /usr/lib (as on Ubuntu)
    local postgres_bin=$(find /usr/lib -executable -type f -name postgres 2>/dev/null)
    local pkgs="default:postgresql gentoo:postgresql-server"
    [[ -z $postgres_bin ]] && offer_install "PostgreSQL" "$pkgs"
  fi

  local postgres_bin_default=$(command -v postgres)
  local postgres_bin_alt=$(find /usr/lib -executable -type f -name postgres 2>/dev/null)
  local postgres_bin=${postgres_bin_default:-$postgres_bin_alt}

  local v=$("$postgres_bin" --version | cut -d' ' -f3 | cut -d'.' -f1)
  # TODO: allow version 8 and above
  check_version "PostgreSQL" "8" $v

  # make sure postgresql server is started
  if ! pgrep postgres >/dev/null; then
    warn "The PostgreSQL server is not running."

    # determine the right start command for the distro
    case "$DIST" in
      (arch)
        START_PSQL="rc.d start postgresql"
        ;;
      (gentoo)
        START_PSQL="/etc/init.d/postgresql-9.1 start"
        ;;
      (lsb|debian)
        START_PSQL="/etc/init.d/postgresql start"
        ;;
      (*)
        fatal "I don't know how to start the PostgreSQL server on your system. Please start the server manually."
        ;;
    esac

    if [[ $(id -u) -ne 0 ]]; then
      if [[ $(command -v sudo) ]]; then
        info "Using sudo to start the PostgreSQL server."
        PREFIX="sudo"
      else
        fatal "You are not root and the sudo command cannot be found. Please start the PostgreSQL server manually."
      fi
    fi

    $PREFIX $START_PSQL
  fi

  # git
  exists "Git" "git" "default:git"

  # GraphicsMagick or ImageMagick
  [[ $(command -v gm 2>/dev/null) || $(command -v mogrify 2>/dev/null) ]] || ( warning "ImageMagick/GraphicsMagick: one of the two is required but not installed."; offer_install "GraphicsMagick" "default:graphicsmagick" )

  info "All dependencies are installed."
}

# Checks if a given binary can be found, and offers
# to install the matching package if it's missing.
exists() {
  local NAME=$1
  local BIN=$2
  local PKGS=$3

  # if exists: skip
  command -v $BIN >/dev/null 2>&1 && return 0
  offer_install $NAME $PKGS

  # check again
  command -v $BIN >/dev/null 2>&1 && return 0
  # if failed: abort
  fatal "$NAME: required but not installed. Please install it manually."
}

check_version() {
  local NAME=$1
  local V_REQ=$2
  local V_EXIST=$3
  [[ $V_EXIST -ge $V_REQ ]] || fatal "$NAME: found version \"$V_EXIST\", but \"$V_REQ\" is required."
}


# Invokes the system's package manager (if supported)
# to install a software package
offer_install() {
  local NAME=$1
  local PKGS=$2

  if [[ "$INSTALL" == "UNKNOWN" ]]; then
    fatal "$NAME: required but not installed. Please install it manually."
  fi
  warn "$NAME: required but not installed."

  yes_or_fatal "Do you want to install $NAME through your package manager now?" "$NAME is required. Please install it manually."

  # find the right package name for the given $DIST
  for pair in $PKGS; do
    if [[ "$pair" =~ ^$DIST ]]; then
      local PKG="${pair#*:}"
      break
    elif [[ "$pair" =~ ^default ]]; then
      local DEFPKG="${pair#*:}"
    fi
  done

  # use default package if no exception for this system was provided
  local PKG=${PKG:-$DEFPKG}

  # install
  if [[ $(id -u) -ne 0 ]]; then
    if [[ $(command -v sudo) ]]; then
      info "You are not root. Using sudo."
      local PREFIX="sudo"
    else
      fatal "You are not root and the sudo command cannot be found. Cannot install dependencies."
    fi
  fi

  clear
  say "------- PACKAGE MANAGER --------"
  $PREFIX $INSTALL $PKG
  say "---- END OF PACKAGE MANAGER ----\n\n"
}
